#include<climits>
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        int n=A.size();
        int m=A[0].size();
        vector<vector<int>>dp(n,vector<int>(m));
        for(int i=0;i<A[0].size();i++){
            dp[0][i] = A[0][i];
        }
        
        for(int i = 1; i<n;i++){
            for(int j=0; j<m ;j++ ){
                int a = j - 1;
                int c = j + 1;
                
                if(a >= 0 && c < m){
                    dp[i][j] = min(dp[i-1][a],min(dp[i-1][c],dp[i-1][j])) + A[i][j];
                }
                else if(a < 0 && c < m){
                    dp[i][j] = min(dp[i-1][c],dp[i-1][j]) + A[i][j];
                }
                else{
                    dp[i][j] = min(dp[i-1][a],dp[i-1][j]) + A[i][j]; 
                }
            }
        }
        int minsum = INT_MAX;
        for(int i=0;i<m;i++){
            if(minsum >= dp[n-1][i]){
                minsum = dp[n-1][i];
            }    
        }
        return minsum;
        
    }
};